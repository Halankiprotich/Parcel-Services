generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ParcelStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum WeightCategory {
  LIGHT    // 0-5kg
  MEDIUM   // 5-20kg
  HEAVY    // 20-50kg
  EXTRA_HEAVY // 50kg+
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // For soft delete

  // Relationships
  sentParcels     Parcel[] @relation("SentParcels")
  receivedParcels Parcel[] @relation("ReceivedParcels")
  notifications   Notification[]

  @@map("users")
}

model Parcel {
  id          String        @id @default(cuid())
  trackingId  String        @unique @default(cuid())
  description String
  weight      Float // in kg
  category    WeightCategory
  status      ParcelStatus  @default(PENDING)
 
  // Sender information
  senderId    String
  sender      User          @relation("SentParcels", fields: [senderId], references: [id])
 
  // Receiver information
  receiverId  String
  receiver    User          @relation("ReceivedParcels", fields: [receiverId], references: [id])
 
  // Location information
  pickupAddress      String
  pickupLatitude     Float?
  pickupLongitude    Float?
  deliveryAddress    String
  deliveryLatitude   Float?
  deliveryLongitude  Float?
 
  // Pricing
  basePrice    Float
  totalPrice   Float
 
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime? // For soft delete
  pickedUpAt   DateTime?
  deliveredAt  DateTime?
 
  // Relationships
  statusHistory ParcelStatusHistory[]
  notifications Notification[]

  @@map("parcels")
}

model ParcelStatusHistory {
  id        String       @id @default(cuid())
  parcelId  String
  parcel    Parcel       @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  status    ParcelStatus
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("parcel_status_history")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parcelId  String?
  parcel    Parcel?  @relation(fields: [parcelId], references: [id])
 
  type      String   // EMAIL, SMS
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  sentAt    DateTime?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model WeightPricing {
  id       String         @id @default(cuid())
  category WeightCategory @unique
  minWeight Float
  maxWeight Float?
  pricePerKg Float
  basePrice  Float
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("weight_pricing")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
